package co.edu.unal.alife.poc.neuralfield;

import static org.junit.Assert.assertTrue;

import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import co.edu.unal.alife.poc.sbw3.four.PocSBW3NeuralfieldSpec2D;
import co.edu.unal.alife.poc.sbw3.four.TestPocSBW3NeuralfieldsInputEquation2D;

public class TestPocNeuralfieldsHomogeneousEquation2D {
	static final Logger logger = LoggerFactory
			.getLogger(TestPocSBW3NeuralfieldsInputEquation2D.class);
	private static final int QN = 4;
	private static final int KN = 17;

	@Test
	public void testEvalFeedbackDelta() {
		logger.info("testEvalFeedbackDelta()");
		PocSBW3NeuralfieldSpec2D spec2d = new PocSBW3NeuralfieldSpec2D(QN, KN,
				KN);
		PocNeuralfieldsHomogeneousEquation2D homogeneousEquation2D = new PocNeuralfieldsHomogeneousEquation2D(
				spec2d);

		/*
		 * Test [0.2,-0.2] -> K[16][0]
		 */
		logger.info("Test [0.2,-0.2] -> K[8][8]");
		double out[] = new double[KN * KN];
		double[] q = new double[QN + KN * KN];
		q[0] = 0.2;
		q[2] = -0.2;
		int expectedIndex = QN + (KN * 8 + 8);
		q[expectedIndex] = 1;
		int maxIndex = -1;
		double maxValue = Double.NEGATIVE_INFINITY;
		for (int i = spec2d.getStartIndex(); i <= spec2d.getEndIndex(); i++) {
			double delta = homogeneousEquation2D.evalFeedbackDelta(q, i);
			out[i - spec2d.getStartIndex()] = delta;
			if (delta > maxValue) {
				maxValue = delta;
				maxIndex = i;
			}
		}
		logger.info("qDot: {}", out);
		assertTrue(maxIndex == expectedIndex);
	}

	@Test
	public void testEvalHomogeneousDelta() {
		logger.info("testEvalHomogeneousDelta()");
		PocSBW3NeuralfieldSpec2D spec2d = new PocSBW3NeuralfieldSpec2D(QN, KN,
				KN);
		PocNeuralfieldsHomogeneousEquation2D homogeneousEquation2D = new PocNeuralfieldsHomogeneousEquation2D(
				spec2d);

		/*
		 * Test A [0.2,-0.2] -> K[16][0]
		 */
		logger.info("Test A [0.2,-0.2] -> K[8][8]");
		double out[] = new double[KN * KN];
		double[] q = new double[QN + KN * KN];
		q[0] = 0.2;
		q[2] = -0.2;
		int targetIndex = QN + (KN * 8 + 8);
		q[targetIndex] = 1;
		int maxIndex = -1;
		double maxValue = Double.NEGATIVE_INFINITY;
		for (int i = spec2d.getStartIndex(); i <= spec2d.getEndIndex(); i++) {
			double delta = homogeneousEquation2D.evalHomogeneousDelta(q, i);
			out[i - spec2d.getStartIndex()] = delta;
			if (delta > maxValue) {
				maxValue = delta;
				maxIndex = i;
			}
		}
		logger.info("qDot: {}", out);
//		assertTrue(maxIndex == targetIndex);
		
		/*
		 * Test B [0.2,-0.2] -> K[8][8]
		 */
		logger.info("Test B [0.2,-0.2] -> K[8][8]");
		out = new double[KN * KN];
		q = new double[] {0.2, 0, -0.2, 0, -0.05, -0.04999999999999999, -0.049999999999999066, -0.04999999999995778, -0.04999999999904938, -0.049999999989286496, -0.04999999993956253, -0.04999999982934028, -0.0499999997587841, -0.04999999982934028, -0.04999999993956253, -0.049999999989286496, -0.04999999999904938, -0.04999999999995778, -0.049999999999999066, -0.04999999999999999, -0.05, -0.04999999999999999, -0.04999999999999813, -0.04999999999983149, -0.04999999999242022, -0.04999999982934028, -0.04999999807666303, -0.049999989149995545, -0.0499999693624073, -0.049999956695847295, -0.0499999693624073, -0.049999989149995545, -0.04999999807666303, -0.04999999982934028, -0.04999999999242022, -0.04999999999983149, -0.04999999999999813, -0.04999999999999999, -0.049999999999999066, -0.04999999999983149, -0.049999999984857185, -0.04999999931886898, -0.04999998466425693, -0.04999982716600266, -0.04999902500203178, -0.04999724685913719, -0.04999610862271379, -0.04999724685913719, -0.04999902500203178, -0.04999982716600266, -0.04999998466425693, -0.04999999931886898, -0.049999999984857185, -0.04999999999983149, -0.049999999999999066, -0.04999999999995778, -0.04999999999242022, -0.04999999931886898, -0.0499999693624073, -0.04999931019108402, -0.04999222584573758, -0.0499561441340992, -0.049876162432721846, -0.04982496402454539, -0.049876162432721846, -0.0499561441340992, -0.04999222584573758, -0.04999931019108402, -0.0499999693624073, -0.04999999931886898, -0.04999999999242022, -0.04999999999995778, -0.04999999999904938, -0.04999999982934028, -0.04999998466425693, -0.04999931019108402, -0.04998446887308769, -0.04982496402454539, -0.049012580145925425, -0.04721178295995058, -0.04605904492383952, -0.04721178295995058, -0.04901258014592543, -0.04982496402454539, -0.04998446887308769, -0.04999931019108402, -0.04999998466425693, -0.04999999982934028, -0.04999999999904938, -0.049999999989286496, -0.04999999807666303, -0.04999982716600266, -0.04999222584573758, -0.04982496402454539, -0.048027342582652316, -0.03887176710891813, -0.018576762514429287, -0.005585391847414814, -0.0185767625144293, -0.038871767108918154, -0.04802734258265232, -0.04982496402454539, -0.04999222584573758, -0.04999982716600266, -0.04999999807666303, -0.049999999989286496, -0.04999999993956253, -0.049999989149995545, -0.04999902500203178, -0.0499561441340992, -0.049012580145925425, -0.03887176710891813, 0.012777026659125001, 0.12726600769908136, 0.20055344072497788, 0.1272660076990812, 0.012777026659124918, -0.038871767108918154, -0.04901258014592543, -0.0499561441340992, -0.04999902500203178, -0.049999989149995545, -0.04999999993956253, -0.04999999982934028, -0.0499999693624073, -0.04999724685913719, -0.049876162432721846, -0.04721178295995058, -0.018576762514429287, 0.12726600769908136, 0.4505531347669079, 0.6574977984184176, 0.45055313476690756, 0.12726600769908109, -0.018576762514429343, -0.047211782959950585, -0.049876162432721846, -0.04999724685913719, -0.0499999693624073, -0.04999999982934028, -0.0499999997587841, -0.049999956695847295, -0.04999610862271379, -0.04982496402454539, -0.04605904492383952, -0.005585391847414814, 0.20055344072497788, 0.6574977984184176, 0.95, 0.657497798418417, 0.20055344072497755, -0.005585391847414897, -0.04605904492383953, -0.04982496402454539, -0.04999610862271379, -0.049999956695847295, -0.0499999997587841, -0.04999999982934028, -0.0499999693624073, -0.04999724685913719, -0.049876162432721846, -0.04721178295995058, -0.0185767625144293, 0.1272660076990812, 0.45055313476690756, 0.657497798418417, 0.4505531347669072, 0.12726600769908097, -0.01857676251442937, -0.047211782959950585, -0.049876162432721846, -0.04999724685913719, -0.0499999693624073, -0.04999999982934028, -0.04999999993956253, -0.049999989149995545, -0.04999902500203178, -0.0499561441340992, -0.04901258014592543, -0.038871767108918154, 0.012777026659124918, 0.12726600769908109, 0.20055344072497755, 0.12726600769908097, 0.012777026659124835, -0.03887176710891816, -0.04901258014592543, -0.0499561441340992, -0.04999902500203178, -0.049999989149995545, -0.04999999993956253, -0.049999999989286496, -0.04999999807666303, -0.04999982716600266, -0.04999222584573758, -0.04982496402454539, -0.04802734258265232, -0.038871767108918154, -0.018576762514429343, -0.005585391847414897, -0.01857676251442937, -0.03887176710891816, -0.04802734258265232, -0.04982496402454539, -0.04999222584573758, -0.04999982716600266, -0.04999999807666303, -0.049999999989286496, -0.04999999999904938, -0.04999999982934028, -0.04999998466425693, -0.04999931019108402, -0.04998446887308769, -0.04982496402454539, -0.04901258014592543, -0.047211782959950585, -0.04605904492383953, -0.047211782959950585, -0.04901258014592543, -0.04982496402454539, -0.04998446887308769, -0.04999931019108402, -0.04999998466425693, -0.04999999982934028, -0.04999999999904938, -0.04999999999995778, -0.04999999999242022, -0.04999999931886898, -0.0499999693624073, -0.04999931019108402, -0.04999222584573758, -0.0499561441340992, -0.049876162432721846, -0.04982496402454539, -0.049876162432721846, -0.0499561441340992, -0.04999222584573758, -0.04999931019108402, -0.0499999693624073, -0.04999999931886898, -0.04999999999242022, -0.04999999999995778, -0.049999999999999066, -0.04999999999983149, -0.049999999984857185, -0.04999999931886898, -0.04999998466425693, -0.04999982716600266, -0.04999902500203178, -0.04999724685913719, -0.04999610862271379, -0.04999724685913719, -0.04999902500203178, -0.04999982716600266, -0.04999998466425693, -0.04999999931886898, -0.049999999984857185, -0.04999999999983149, -0.049999999999999066, -0.04999999999999999, -0.04999999999999813, -0.04999999999983149, -0.04999999999242022, -0.04999999982934028, -0.04999999807666303, -0.049999989149995545, -0.0499999693624073, -0.049999956695847295, -0.0499999693624073, -0.049999989149995545, -0.04999999807666303, -0.04999999982934028, -0.04999999999242022, -0.04999999999983149, -0.04999999999999813, -0.04999999999999999, -0.05, -0.04999999999999999, -0.049999999999999066, -0.04999999999995778, -0.04999999999904938, -0.049999999989286496, -0.04999999993956253, -0.04999999982934028, -0.0499999997587841, -0.04999999982934028, -0.04999999993956253, -0.049999999989286496, -0.04999999999904938, -0.04999999999995778, -0.049999999999999066, -0.04999999999999999, -0.05};
		for (int i = spec2d.getStartIndex(); i <= spec2d.getEndIndex(); i++) {
			double delta = homogeneousEquation2D.evalHomogeneousDelta(q, i);
			out[i - spec2d.getStartIndex()] = delta;
		}
		logger.info("qDot: {}", out);
//		assertTrue(maxIndex == targetIndex);

	}

}
