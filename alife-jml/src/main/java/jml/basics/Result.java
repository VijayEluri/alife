/*
 * <copyright>
 *  Copyright 2004-2005 (Jonatan Gomez Solutions JG-Sol)
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the JML Open Source License as published by
 *  UN-Data Mining Group on the JML Open Source Website
 *  (http://dis.unal.edu.co/profesores/jgomez/projects/jml/index.htm).
 *
 *  THE JML SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
 *  PROVIDED "AS IS" WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
 *  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
 *  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
 *  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
 *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
 *  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 *  PERFORMANCE OF THE JML SOFTWARE.
 *
 * </copyright>
 */
package jml.basics;

/**
 * <p>Title: Result</p>
 * <p>Description: This class represents the results generated by an algorithm.
 * This class provides methods for calculating statistical information of the
 * execution of the algorithm (for experimental analysis),
 * In particular, this class provides the basic methods used by an experiment
 * to calculate average and variance. If the results of the algorithm will not contain
 * statistical information then the results can be inherited from the class SimpleResult.</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: Universidad Nacional de Colombia</p>
 * @author Jonatan Gomez
 * @version 1.0
 */
public abstract class Result {

  /**
   * Add the statistics object with the given statistic object.
   * Every class that extends Result has to cast the Statistic
   * object given as argument to its own class.  Suppose class A extends Result
   * <p> class A extends Result{</p>
   * <p>   protected double val = 0.0;</p>
   * <p>   public A( double v ){ val = v; }</p>
   * <p>   ...</p>
   * <p>   public void sum( Result other ){</p>
   * <p>      if( other instanceof A ){</p>
   * <p>        A o = (A)other;</p>
   * <p>        val += o.val;</p>
   * <p>      }</p>
   * <p>   }</p>
   * <p> }</p>
   * <p>Here the sum method determines if the Result object other belongs to the same class (A),
   * if it is true then cast the object to the class and perform the sum operation</p>
   * @param other The statistic object that will be added to the Statistic object
   */
  public abstract void sum(Result other);

  /**
   * Substract the statistics object with the given statistic object.
   * Every class that extends Result has to cast the Statistic
   * object given as argument to its own class. This method is useful for calculating the variance.
   * Suppose class A extends Result
   * <p> class A extends Result{</p>
   * <p>   protected double val = 0.0;</p>
   * <p>   ...</p>
   * <p>   public void substract( Result other ){</p>
   * <p>      if( other instanceof A ){</p>
   * <p>        A o = (A)other;</p>
   * <p>        val -= o.val;</p>
   * <p>      }</p>
   * <p>   }</p>
   * <p> }</p>
   *
   * Here the substract method determines if the Result object other belongs to the same class (A),
   * if it is true then cast the object to the class and perform the substract operation
   * @param other The statistic object that will be substracted from the Statistic object
   */
  public abstract void substract(Result other);

  /**
   * Divide the statistical object by the number given.  Suppose class A extends Result
   * <p> class A extends Result{</p>
   * <p>   protected double val = 0.0;</p>
   * <p>   ...</p>
   * <p>   public void divide( double n ){</p>
   * <p>        val /= n;</p>
   * <p>      }</p>
   * <p>   }</p>
   * <p> }</p>
   *
   * Here the divide method divides by n the appropiated attributes of the object
   * @param n The number used to divide the object
   */
  public abstract void divide(double n);

  /**
   * multiply the statistical object by itself. This method is very useful for calculating the variance.
   * Suppose class A extends Result
   * <p> class A extends Result{</p>
   * <p>   protected double val = 0.0;</p>
   * <p>   ...</p>
   * <p>   public void square(){</p>
   * <p>        val *= val;</p>
   * <p>      }</p>
   * <p>   }</p>
   * <p> }</p>
   *
   * Here the square method squares the appropiated attributes of the object
   */
  public abstract void square();

  /**
   * get the square root of the statistical object.
   * This method is useful for calculating the standard deviation.
   * Suppose class A extends Result
   * <p> class A extends Result{</p>
   * <p>   protected double val = 0.0;</p>
   * <p>   ...</p>
   * <p>   public void sqrt(){</p>
   * <p>        val = Math.sqrt(val);</p>
   * <p>      }</p>
   * <p>   }</p>
   * <p> }</p>
   *
   * Here the sqrt method gets the square root of the appropiated attributes of the object
   */
  public abstract void sqrt();
 /**
  * Clone the object
  * @return The clone
  */
  public Object clone() { return null; }

  /**
   * Calculates the average Result object of a given collection of Result objects.
   * All the objects in the argument collection should belong to the
   * same class. In other case the average will be not calculated.
   * @param x A collection of Result objects
   * @return The average Result object of a given collection of Result objects
   */
  public static Result average(Result[] x) {
    Result avg = null;
    if (x != null && x.length > 0) {
      avg = (Result) x[0].clone();
      int n = x.length;
      for (int i = 1; i < n; i++) {
        avg.sum(x[i]);
      }
      avg.divide(n);
    }
    return avg;
  }

  /**
   * Calculates the variance Result object of a given collection of Result objects.
   * All the objects in the argument collection should belong to the
   * same class. In other case the variance will be not calculated.
   * @param x A collection of Result objects
   * @return The variance Result object of a given collection of Result objects
   */
  public static Result variance(Result[] x) {
    return variance(x, average(x));
  }

  /**
   * Calculates the variance Result object of a given collection of Result objects.
   * All the objects in the argument collection should belong to the
   * same class. In other case the variance will be not calculated.
   * @param x A collection of Result objects
   * @param avg The average statistics of the collection
   * @return The variance Result object of a given collection of Result objects
   */
  public static Result variance(Result[] x, Result avg) {
    Result variance = null;
    if (x != null && x.length > 0) {
      variance = (Result) x[0].clone();
      variance.substract(avg);
      variance.square();
      int n = x.length;
      for (int i = 1; i < n; i++) {
        Result c = (Result) x[i].clone();
        c.substract(avg);
        c.square();
        variance.sum(c);
      }
      variance.divide(n - 1);
    }
    return variance;
  }

  /**
   * Calculates the standar deviation Result object of a given collection of Result objects.
   * All the objects in the argument collection should belong to the
   * same class. In other case the standard deviation will be not calculated.
   * @param x A collection of Result objects
   * @return The standar deviation object of a given collection of Result objects
   */
  public static Result stdDeviation(Result[] x) {
    return stdDeviation(x, average(x));
  }

  /**
   * Calculates the standar deviation Result object of a given collection of Result objects.
   * All the objects in the argument collection should belong to the
   * same class. In other case the standard deviation will be not calculated.
   * @param x A collection of Result objects
   * @param avg The average statistics of the collection
   * @return The standar deviation object of a given collection of Result objects
   */
  public static Result stdDeviation(Result[] x, Result avg) {
    Result r = variance(x, avg);
    r.sqrt();
    return r;
  }

  /**
   * Calculates the standar error Result object of a given collection of Result objects.
   * All the objects in the argument collection should belong to the
   * same class. In other case the standard deviation will be not calculated.
   * @param x A collection of Result objects
   * @return The standar error object of a given collection of Result objects
   */
  public static Result stdError(Result[] x) {
    return stdError(x, average(x));
  }

  /**
   * Calculates the standar error Result object of a given collection of Result objects.
   * All the objects in the argument collection should belong to the
   * same class. In other case the standard deviation will be not calculated.
   * @param x A collection of Result objects
   * @param avg The average statistics of the collection
   * @return The standar error object of a given collection of Result objects
   */
  public static Result stdError(Result[] x, Result avg) {
    Result r = stdDeviation(x, avg);
    r.divide(Math.sqrt(x.length));
    return r;
  }


}
