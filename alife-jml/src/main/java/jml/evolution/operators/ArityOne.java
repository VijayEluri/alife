/*
 * <copyright>
 *  Copyright 2004-2005 (Jonatan Gomez Solutions JG-Sol)
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the JML Open Source License as published by
 *  UN-Data Mining Group on the JML Open Source Website
 *  (http://dis.unal.edu.co/profesores/jgomez/projects/jml/index.htm).
 *
 *  THE JML SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
 *  PROVIDED "AS IS" WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
 *  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
 *  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
 *  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
 *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
 *  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 *  PERFORMANCE OF THE JML SOFTWARE.
 *
 * </copyright>
 */
package jml.evolution.operators;

import java.util.Vector;

import jml.basics.Cloner;
import jml.evolution.Environment;
import jml.evolution.Individual;
import jml.evolution.Operator;
import jml.evolution.Population;

/**
 * <p>Title:ArityOne</p>
 * <p>Description: A unary operator</p>
 * <p>Copyright:    Copyright (c) 2004</p>
 * <p>Company:Universidad Nacional de Colombia</p>
 * @author Jonatan Gomez
 * @version 1.0
 */

public abstract class ArityOne extends Operator {

  /**
   * Constructor: Create a genetic operator with arity equal one
   */
  public ArityOne(Environment _environment) {
    super(_environment);
  }


  /**
   * Apply the unary genetic operator over the individual
   * @param obj Individual to be modified by the genetic operator
   * @return extra information of the genetic operator
   */
  public abstract Object apply(Object obj);

  /**
   * Apply the unary genetic operator over the individual
   * @param obj Individual to be modified by the genetic operator
   * @return extra information of the genetic operator
   */
  public Object apply(Individual obj) {
    return apply(obj.getGenome());
  }

  /**
   * Apply the operator over the given individuals
   * @param population Source population
   * @param x Individual used as first parent
   * @return A collection of individuals generated by the operator
   */
  public Vector apply(Population population, int x) {
    Individual c = null;
    if (population != null) {
      c = population.get(x);
      c = (Individual) Cloner.clone(population.get(x));
      apply(c);
    }
    Vector v = new Vector();
    v.add(c);
    return v;
  }

  /**
   * Return the genetic operator arity
   * @return the genetic operator arity
   */
  public int getArity() { return 1; }

}
