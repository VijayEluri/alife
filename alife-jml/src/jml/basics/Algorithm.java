/*
 * <copyright>
 *  Copyright 2004-2005 (Jonatan Gomez Solutions JG-Sol)
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the JML Open Source License as published by
 *  UN-Data Mining Group on the JML Open Source Website
 *  (http://dis.unal.edu.co/profesores/jgomez/projects/jml/index.htm).
 *
 *  THE JML SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
 *  PROVIDED "AS IS" WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
 *  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
 *  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
 *  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
 *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
 *  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 *  PERFORMANCE OF THE JML SOFTWARE.
 *
 * </copyright>
 */
package jml.basics;


import java.util.Enumeration;
import java.util.Vector;

/**
 * <p>Title: Algorithm</p>
 * <p>Description: This class is an abstract version of an algorithm.
 * <p>A subclass that implements the Algorithm class can receive the
 * algorithm inputs in the constructor.</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: Universidad Nacional de Colombia</p>
 * @author Jonatan Gomez
 * @version 1.0
 */

public abstract class Algorithm extends Thread {

  /**
  * Algorithm input
  */	
  public Object input;

  /**
   * If the algorithm has finished or not
   */
  public boolean done = false;

  /**
   * Flag used for ending the execution of the algorithm.
   */
  public boolean continueFlag = true;

  /**
   * Indicates the trace level of an algorithm. Useful for keeping information
   * of the algorithm execution. A level >= 0 indicates that the algorithm will
   * store its intermediate results. A level lower than 0 indicates that the
   * algorithm will just keep the output
   */
  public Vector tracer = new Vector();

  /**
   * Inits the internal state of the algorithm.
   * @param inPut Object input
   */
  public void init(Object inPut) {
    input = inPut;
  }
  /**
   * Set the internal state of algorithm
   * @param inPut Object input
   */
  public void setinput(Object inPut) {
	  input = inPut;
  };
  /**
   * Get the internal state of algorithm
   * @return The internal state of algorithm
   */
  public Object getinput() {
	  return input;
  };

  /**
   * Get tracer
   * @return The tracer
   */
  public Vector getTracer() {
	  return tracer;
  };
  /**
   * Gets the result generated by the algorithm
   * @return Anwer produced by the algorithm
   */
  public abstract Object output();

  /**
   * Add object to trace 
   */
  public void addToTrace() {
    if (tracer.size() > 0) { addToTrace(output());  }
  }

  /**
   * Fixes the trace level of the algorithm
   * @param t Trace level of the algorithm (level of information
   * stored by the algorithm in the execution of it)
   */
  public void addTracer(Tracer t) {
    tracer.add(t);
  }

  /**
   * Remove tracer from vector trace
   * @param t Tracer to remove
   */
  public void removeTracer(Tracer t) {
    int n = tracer.size();
    int i = 0;
    while (i < n && t != tracer.get(i)) { i++; }
    if (i < n) { tracer.remove(i); }
  }

  /**
   * Set tracer
   * @param aTracer Vector to set
   */
  public void setTracers(Vector aTracer) {
    tracer = aTracer;
  }

  /**
   * Add object to trace
   * @param obj Object to add
   */
  public void addToTrace(Object obj) {
    Enumeration iter = tracer.elements();
    while (iter.hasMoreElements()) {
      Tracer t = (Tracer) iter.nextElement();
      t.add(this, obj);
    }
  }
}
